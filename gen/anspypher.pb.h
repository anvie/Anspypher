// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anspypher.proto

#ifndef PROTOBUF_anspypher_2eproto__INCLUDED
#define PROTOBUF_anspypher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

namespace anspypher {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_anspypher_2eproto();
void protobuf_AssignDesc_anspypher_2eproto();
void protobuf_ShutdownFile_anspypher_2eproto();

class SearchResult;
class CachedResult;
class SearchRequest;
class SearchResponse;

// ===================================================================

class SearchResult : public ::google::protobuf::Message {
 public:
  SearchResult();
  virtual ~SearchResult();
  
  SearchResult(const SearchResult& from);
  
  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResult& default_instance();
  
  void Swap(SearchResult* other);
  
  // implements Message ----------------------------------------------
  
  SearchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchResult& from);
  void MergeFrom(const SearchResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  
  // optional string tags = 2;
  inline bool has_tags() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 2;
  inline const ::std::string& tags() const;
  inline void set_tags(const ::std::string& value);
  inline void set_tags(const char* value);
  inline void set_tags(const char* value, size_t size);
  inline ::std::string* mutable_tags();
  
  // required string snippet = 3;
  inline bool has_snippet() const;
  inline void clear_snippet();
  static const int kSnippetFieldNumber = 3;
  inline const ::std::string& snippet() const;
  inline void set_snippet(const ::std::string& value);
  inline void set_snippet(const char* value);
  inline void set_snippet(const char* value, size_t size);
  inline ::std::string* mutable_snippet();
  
  // required string url = 4;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 4;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  
  // optional string age = 5;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 5;
  inline const ::std::string& age() const;
  inline void set_age(const ::std::string& value);
  inline void set_age(const char* value);
  inline void set_age(const char* value, size_t size);
  inline ::std::string* mutable_age();
  
  // optional int64 timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:anspypher.SearchResult)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* title_;
  static const ::std::string _default_title_;
  ::std::string* tags_;
  static const ::std::string _default_tags_;
  ::std::string* snippet_;
  static const ::std::string _default_snippet_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* age_;
  static const ::std::string _default_age_;
  ::google::protobuf::int64 timestamp_;
  friend void  protobuf_AddDesc_anspypher_2eproto();
  friend void protobuf_AssignDesc_anspypher_2eproto();
  friend void protobuf_ShutdownFile_anspypher_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SearchResult* default_instance_;
};
// -------------------------------------------------------------------

class CachedResult : public ::google::protobuf::Message {
 public:
  CachedResult();
  virtual ~CachedResult();
  
  CachedResult(const CachedResult& from);
  
  inline CachedResult& operator=(const CachedResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CachedResult& default_instance();
  
  void Swap(CachedResult* other);
  
  // implements Message ----------------------------------------------
  
  CachedResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CachedResult& from);
  void MergeFrom(const CachedResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string rowkey = 1;
  inline bool has_rowkey() const;
  inline void clear_rowkey();
  static const int kRowkeyFieldNumber = 1;
  inline const ::std::string& rowkey() const;
  inline void set_rowkey(const ::std::string& value);
  inline void set_rowkey(const char* value);
  inline void set_rowkey(const char* value, size_t size);
  inline ::std::string* mutable_rowkey();
  
  // required string keywords = 2;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 2;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const char* value, size_t size);
  inline ::std::string* mutable_keywords();
  
  // @@protoc_insertion_point(class_scope:anspypher.CachedResult)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* rowkey_;
  static const ::std::string _default_rowkey_;
  ::std::string* keywords_;
  static const ::std::string _default_keywords_;
  friend void  protobuf_AddDesc_anspypher_2eproto();
  friend void protobuf_AssignDesc_anspypher_2eproto();
  friend void protobuf_ShutdownFile_anspypher_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CachedResult* default_instance_;
};
// -------------------------------------------------------------------

class SearchRequest : public ::google::protobuf::Message {
 public:
  SearchRequest();
  virtual ~SearchRequest();
  
  SearchRequest(const SearchRequest& from);
  
  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();
  
  void Swap(SearchRequest* other);
  
  // implements Message ----------------------------------------------
  
  SearchRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  
  // required int32 start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);
  
  // required int32 limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:anspypher.SearchRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* query_;
  static const ::std::string _default_query_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 limit_;
  friend void  protobuf_AddDesc_anspypher_2eproto();
  friend void protobuf_AssignDesc_anspypher_2eproto();
  friend void protobuf_ShutdownFile_anspypher_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SearchRequest* default_instance_;
};
// -------------------------------------------------------------------

class SearchResponse : public ::google::protobuf::Message {
 public:
  SearchResponse();
  virtual ~SearchResponse();
  
  SearchResponse(const SearchResponse& from);
  
  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchResponse& default_instance();
  
  void Swap(SearchResponse* other);
  
  // implements Message ----------------------------------------------
  
  SearchResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .anspypher.SearchResult search_results = 1;
  inline int search_results_size() const;
  inline void clear_search_results();
  static const int kSearchResultsFieldNumber = 1;
  inline const ::anspypher::SearchResult& search_results(int index) const;
  inline ::anspypher::SearchResult* mutable_search_results(int index);
  inline ::anspypher::SearchResult* add_search_results();
  inline const ::google::protobuf::RepeatedPtrField< ::anspypher::SearchResult >&
      search_results() const;
  inline ::google::protobuf::RepeatedPtrField< ::anspypher::SearchResult >*
      mutable_search_results();
  
  // @@protoc_insertion_point(class_scope:anspypher.SearchResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::anspypher::SearchResult > search_results_;
  friend void  protobuf_AddDesc_anspypher_2eproto();
  friend void protobuf_AssignDesc_anspypher_2eproto();
  friend void protobuf_ShutdownFile_anspypher_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SearchResponse* default_instance_;
};
// ===================================================================

class SearchService_Stub;

class SearchService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline SearchService() {};
 public:
  virtual ~SearchService();
  
  typedef SearchService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void Search(::google::protobuf::RpcController* controller,
                       const ::anspypher::SearchRequest* request,
                       ::anspypher::SearchResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SearchService);
};

class SearchService_Stub : public SearchService {
 public:
  SearchService_Stub(::google::protobuf::RpcChannel* channel);
  SearchService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~SearchService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements SearchService ------------------------------------------
  
  void Search(::google::protobuf::RpcController* controller,
                       const ::anspypher::SearchRequest* request,
                       ::anspypher::SearchResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(SearchService_Stub);
};


// ===================================================================


// ===================================================================

// SearchResult

// required string title = 1;
inline bool SearchResult::has_title() const {
  return _has_bit(0);
}
inline void SearchResult::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SearchResult::title() const {
  return *title_;
}
inline void SearchResult::set_title(const ::std::string& value) {
  _set_bit(0);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SearchResult::set_title(const char* value) {
  _set_bit(0);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SearchResult::set_title(const char* value, size_t size) {
  _set_bit(0);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchResult::mutable_title() {
  _set_bit(0);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// optional string tags = 2;
inline bool SearchResult::has_tags() const {
  return _has_bit(1);
}
inline void SearchResult::clear_tags() {
  if (tags_ != &_default_tags_) {
    tags_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SearchResult::tags() const {
  return *tags_;
}
inline void SearchResult::set_tags(const ::std::string& value) {
  _set_bit(1);
  if (tags_ == &_default_tags_) {
    tags_ = new ::std::string;
  }
  tags_->assign(value);
}
inline void SearchResult::set_tags(const char* value) {
  _set_bit(1);
  if (tags_ == &_default_tags_) {
    tags_ = new ::std::string;
  }
  tags_->assign(value);
}
inline void SearchResult::set_tags(const char* value, size_t size) {
  _set_bit(1);
  if (tags_ == &_default_tags_) {
    tags_ = new ::std::string;
  }
  tags_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchResult::mutable_tags() {
  _set_bit(1);
  if (tags_ == &_default_tags_) {
    tags_ = new ::std::string;
  }
  return tags_;
}

// required string snippet = 3;
inline bool SearchResult::has_snippet() const {
  return _has_bit(2);
}
inline void SearchResult::clear_snippet() {
  if (snippet_ != &_default_snippet_) {
    snippet_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SearchResult::snippet() const {
  return *snippet_;
}
inline void SearchResult::set_snippet(const ::std::string& value) {
  _set_bit(2);
  if (snippet_ == &_default_snippet_) {
    snippet_ = new ::std::string;
  }
  snippet_->assign(value);
}
inline void SearchResult::set_snippet(const char* value) {
  _set_bit(2);
  if (snippet_ == &_default_snippet_) {
    snippet_ = new ::std::string;
  }
  snippet_->assign(value);
}
inline void SearchResult::set_snippet(const char* value, size_t size) {
  _set_bit(2);
  if (snippet_ == &_default_snippet_) {
    snippet_ = new ::std::string;
  }
  snippet_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchResult::mutable_snippet() {
  _set_bit(2);
  if (snippet_ == &_default_snippet_) {
    snippet_ = new ::std::string;
  }
  return snippet_;
}

// required string url = 4;
inline bool SearchResult::has_url() const {
  return _has_bit(3);
}
inline void SearchResult::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SearchResult::url() const {
  return *url_;
}
inline void SearchResult::set_url(const ::std::string& value) {
  _set_bit(3);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void SearchResult::set_url(const char* value) {
  _set_bit(3);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void SearchResult::set_url(const char* value, size_t size) {
  _set_bit(3);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchResult::mutable_url() {
  _set_bit(3);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional string age = 5;
inline bool SearchResult::has_age() const {
  return _has_bit(4);
}
inline void SearchResult::clear_age() {
  if (age_ != &_default_age_) {
    age_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& SearchResult::age() const {
  return *age_;
}
inline void SearchResult::set_age(const ::std::string& value) {
  _set_bit(4);
  if (age_ == &_default_age_) {
    age_ = new ::std::string;
  }
  age_->assign(value);
}
inline void SearchResult::set_age(const char* value) {
  _set_bit(4);
  if (age_ == &_default_age_) {
    age_ = new ::std::string;
  }
  age_->assign(value);
}
inline void SearchResult::set_age(const char* value, size_t size) {
  _set_bit(4);
  if (age_ == &_default_age_) {
    age_ = new ::std::string;
  }
  age_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchResult::mutable_age() {
  _set_bit(4);
  if (age_ == &_default_age_) {
    age_ = new ::std::string;
  }
  return age_;
}

// optional int64 timestamp = 6;
inline bool SearchResult::has_timestamp() const {
  return _has_bit(5);
}
inline void SearchResult::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 SearchResult::timestamp() const {
  return timestamp_;
}
inline void SearchResult::set_timestamp(::google::protobuf::int64 value) {
  _set_bit(5);
  timestamp_ = value;
}

// -------------------------------------------------------------------

// CachedResult

// required string rowkey = 1;
inline bool CachedResult::has_rowkey() const {
  return _has_bit(0);
}
inline void CachedResult::clear_rowkey() {
  if (rowkey_ != &_default_rowkey_) {
    rowkey_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CachedResult::rowkey() const {
  return *rowkey_;
}
inline void CachedResult::set_rowkey(const ::std::string& value) {
  _set_bit(0);
  if (rowkey_ == &_default_rowkey_) {
    rowkey_ = new ::std::string;
  }
  rowkey_->assign(value);
}
inline void CachedResult::set_rowkey(const char* value) {
  _set_bit(0);
  if (rowkey_ == &_default_rowkey_) {
    rowkey_ = new ::std::string;
  }
  rowkey_->assign(value);
}
inline void CachedResult::set_rowkey(const char* value, size_t size) {
  _set_bit(0);
  if (rowkey_ == &_default_rowkey_) {
    rowkey_ = new ::std::string;
  }
  rowkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CachedResult::mutable_rowkey() {
  _set_bit(0);
  if (rowkey_ == &_default_rowkey_) {
    rowkey_ = new ::std::string;
  }
  return rowkey_;
}

// required string keywords = 2;
inline bool CachedResult::has_keywords() const {
  return _has_bit(1);
}
inline void CachedResult::clear_keywords() {
  if (keywords_ != &_default_keywords_) {
    keywords_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CachedResult::keywords() const {
  return *keywords_;
}
inline void CachedResult::set_keywords(const ::std::string& value) {
  _set_bit(1);
  if (keywords_ == &_default_keywords_) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
}
inline void CachedResult::set_keywords(const char* value) {
  _set_bit(1);
  if (keywords_ == &_default_keywords_) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
}
inline void CachedResult::set_keywords(const char* value, size_t size) {
  _set_bit(1);
  if (keywords_ == &_default_keywords_) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CachedResult::mutable_keywords() {
  _set_bit(1);
  if (keywords_ == &_default_keywords_) {
    keywords_ = new ::std::string;
  }
  return keywords_;
}

// -------------------------------------------------------------------

// SearchRequest

// required string query = 1;
inline bool SearchRequest::has_query() const {
  return _has_bit(0);
}
inline void SearchRequest::clear_query() {
  if (query_ != &_default_query_) {
    query_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SearchRequest::query() const {
  return *query_;
}
inline void SearchRequest::set_query(const ::std::string& value) {
  _set_bit(0);
  if (query_ == &_default_query_) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void SearchRequest::set_query(const char* value) {
  _set_bit(0);
  if (query_ == &_default_query_) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void SearchRequest::set_query(const char* value, size_t size) {
  _set_bit(0);
  if (query_ == &_default_query_) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchRequest::mutable_query() {
  _set_bit(0);
  if (query_ == &_default_query_) {
    query_ = new ::std::string;
  }
  return query_;
}

// required int32 start = 2;
inline bool SearchRequest::has_start() const {
  return _has_bit(1);
}
inline void SearchRequest::clear_start() {
  start_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SearchRequest::start() const {
  return start_;
}
inline void SearchRequest::set_start(::google::protobuf::int32 value) {
  _set_bit(1);
  start_ = value;
}

// required int32 limit = 3;
inline bool SearchRequest::has_limit() const {
  return _has_bit(2);
}
inline void SearchRequest::clear_limit() {
  limit_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SearchRequest::limit() const {
  return limit_;
}
inline void SearchRequest::set_limit(::google::protobuf::int32 value) {
  _set_bit(2);
  limit_ = value;
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .anspypher.SearchResult search_results = 1;
inline int SearchResponse::search_results_size() const {
  return search_results_.size();
}
inline void SearchResponse::clear_search_results() {
  search_results_.Clear();
}
inline const ::anspypher::SearchResult& SearchResponse::search_results(int index) const {
  return search_results_.Get(index);
}
inline ::anspypher::SearchResult* SearchResponse::mutable_search_results(int index) {
  return search_results_.Mutable(index);
}
inline ::anspypher::SearchResult* SearchResponse::add_search_results() {
  return search_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::anspypher::SearchResult >&
SearchResponse::search_results() const {
  return search_results_;
}
inline ::google::protobuf::RepeatedPtrField< ::anspypher::SearchResult >*
SearchResponse::mutable_search_results() {
  return &search_results_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace anspypher

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_anspypher_2eproto__INCLUDED
